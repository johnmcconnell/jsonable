package com.bareknucklecoding.plato.json_models;

import java.util.List;
import java.util.ArrayList;

import org.json.JSONObject;
import org.json.JSONException;

public class <%= class_name @model %> {
  <% @model.fields.each do |field| %>
    <%= "private #{field_def field};" %>
  <% end %>
  public <%= class_name @model %> unmarshal(JSONObject object) throws JSONException {
  <% @model.fields.each do |field| %>
    <% if field.array? %>
       <%= "#{field_def field} = new Array#{field_type field}();" %>
       <%= "for(int x = 0; x < object.getJSONArray(\"#{field.name}\").length(); x++) {" %>
       <%= "JSONObject #{field_name field}Object = object.getJSONArray(\"#{field.name}\")" %>
       <%= "  .getJSONObject(x);" %>
       <%= "  #{field_name field}.add(new #{model_type_of_array field.type}().unmarshal(#{field_name field}Object));" %>
       <%= "}" %>
    <% else %>
      <%= "#{field_def field} = object.#{json_field_call_getter field};" %>
    <% end %>
  <% end %>
    return new <%= class_name @model%>(<%= constructor_call_args @model.fields %>);
  }

  public JSONObject toJSONObject() throws JSONException {
    JSONObject object = new JSONObject();
  <% @model.fields.each do |field| %>
    <%= json_field_call_setter(field) do "object." end %>
  <% end %>
    return object;
  }

  public <%= class_name @model %>(){
  }

  public <%= class_name @model %>(<%= constructor_declaration_args @model.fields %>){
  <% @model.fields.each do |field| %>
    <%= constructor_set field %>
  <% end %>
  }

  <% @model.fields.each do |field| %>
  public <%= "#{field_type field} #{getter_name field.name}" %>() {
    return <%= field_name field %>;
  }
  <% end %>
}
